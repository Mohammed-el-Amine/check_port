#!/usr/bin/env python3
# Interface graphique Tkinter pour le scanner de ports avec privil√®ges admin

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import tkinter.font as tkfont
import sys
import os
import io
import contextlib
import platform
import subprocess
import shutil
import threading
import time
import shlex
from concurrent.futures import ThreadPoolExecutor, as_completed
import socket



# Texte d'aide int√©gr√© ‚Äî guide d'utilisation de l'interface graphique (en fran√ßais)
HELP_TEXT = """
Guide d'utilisation - Scanner de Ports (Interface Graphique)
=========================================================

1) Configuration de base
- Cible : saisissez une adresse IP ou un nom d'h√¥te (ex: localhost, 192.168.1.1).
- Ports : choisissez une option dans la liste (common, top1000, top5000, all, 1-1024),
    ou entrez une liste/intervalle manuellement (ex: 22,80,443 or 8000-8100).

2) Options
- "Afficher les ports dynamiques" : cochez pour inclure les ports √©ph√©m√®res (32768-65535).
    Par d√©faut ils sont masqu√©s pour r√©duire le bruit.

3) Contr√¥les principaux
- üöÄ D√©marrer le Scan : lance le scan en arri√®re-plan et affiche la progression.
- ‚èπÔ∏è Arr√™ter : stoppe le scan en cours (les r√©sultats d√©j√† trouv√©s restent affich√©s).
- ÔøΩÔ∏è Effacer : supprime toutes les lignes de r√©sultats affich√©es.
- ‚ùì Aide : ouvre cette fen√™tre d'aide.

4) R√©sultats
- La table affiche : Port | Service | PID | Processus | S√©curit√© | Actions
- Double-clic sur une ligne : ouvre une fen√™tre de d√©tails pour ce port (banner, PIDs, cmdline, actions).
- Clic droit (menu contextuel) : options rapides pour arr√™ter le service, tuer le processus ou copier les d√©tails.

5) Actions n√©cessitant des privil√®ges
- Pour voir les PID locaux complets et arr√™ter/tuer des processus, ex√©cutez l'application en mode administrateur.
    L'interface proposera de relancer avec sudo si n√©cessaire.
- Sur Linux, choisir "Relancer avec sudo" fermera la fen√™tre actuelle et relancera le script en root
    (vous saisirez votre mot de passe dans le terminal).

6) D√©tails et bonnes pratiques
- La fen√™tre de d√©tail montre le banner r√©seau (si pr√©sent), la liste des PIDs, leur utilisateur
    et la ligne de commande (si disponible). Si la cible est distante, les PID locaux ne sont pas r√©cup√©rables.
- Avant de tuer un processus, pr√©f√©rer d'abord arr√™ter proprement le service (ex: systemctl stop <service>).
- Attention : tuer un processus peut provoquer une perte ou corruption de donn√©es.

7) D√©pannage rapide
- Si l'interface ne peut pas relancer en sudo (ou si l'affichage √©choue en root), ex√©cutez le script
    manuellement depuis un shell :
        sudo python3 gui_port_scanner.py
- Si vous ne voyez pas les PID apr√®s relance en root, v√©rifiez que vous avez les droits et que
    les outils syst√®me (ss/lsof) sont disponibles.

8) Exemples rapides
- Scanner les ports web communs sur localhost : s√©lectionnez 'common' puis D√©marrer.
- Scanner 1-1024 : choisissez '1-1024' puis D√©marrer.

Questions / am√©lioration
- Si vous voulez que j'ajoute des info-bulles (tooltips) sur les boutons ou l'option
    pour afficher le chemin complet de l'ex√©cutable (via psutil), dites-le et je l'impl√©mente.

"""

# Palette macOS-like (light)
PALETTE = {
    # Light neutral background used by macOS windows
    "bg": "#f6f7f8",        # window background
    "card": "#ffffff",      # card / panel background
    "accent": "#0a84ff",    # macOS system blue
    "muted": "#6b7280",     # muted text
    "text": "#0f1724",      # primary text (dark)
    "danger": "#ff375f",    # macOS red
}

# Polices (San Francisco preferred with fallbacks)
FONT_TITLE = ("SF Pro Display", 18, "bold")
FONT_SUB = ("SF Pro Text", 12)
FONT_UI = ("SF Pro Text", 12)


# Import des fonctions du scanner principal
try:
    from check_port import (
        parse_ports, scan_port, get_service_info, get_pids_for_port,
        find_pids_linux, find_pids_windows, get_process_details,
        kill_pids, is_local_target_strict, get_local_ips,
        DEFAULT_TARGET, DEFAULT_TIMEOUT, DEFAULT_WORKERS,
        COMMON_PORTS, ALL_PORTS
    )
except ImportError:
    messagebox.showerror("Erreur", "Impossible d'importer check_port.py\nAssurez-vous qu'il est dans le m√™me dossier.")
    sys.exit(1)

class PortScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Scanner de Ports Avanc√© - Interface Graphique")
        self.root.geometry("1200x800")
        # Use the palette background for a macOS-like window
        try:
            self.root.configure(bg=PALETTE["bg"])
        except Exception:
            pass
        
        # Variables
        self.scan_running = False
        self.scan_results = []
        self.is_admin = self.check_admin_privileges()
        self.admin_dialog_shown = False  # Pour √©viter de redemander

        # Compute a one-time scale based on the screen size and derive
        # scaled font tuples. This makes the UI responsive to screen
        # resolution at startup but avoids continuous resizing.
        try:
            self.root.update_idletasks()
            sw = float(self.root.winfo_screenwidth() or 1200)
            sh = float(self.root.winfo_screenheight() or 800)
            base_w, base_h = 1200.0, 800.0
            scale = min(max(min(sw / base_w, sh / base_h), 0.8), 1.4)
        except Exception:
            scale = 1.0

        def scaled_font(tpl, default_size):
            try:
                fam = tpl[0] if isinstance(tpl, (list, tuple)) and len(tpl) > 0 else tpl
                size = tpl[1] if isinstance(tpl, (list, tuple)) and len(tpl) > 1 else default_size
                weight = tpl[2] if isinstance(tpl, (list, tuple)) and len(tpl) > 2 else None
                new_size = max(9, int(size * scale))
                if weight:
                    return (fam, new_size, weight)
                return (fam, new_size)
            except Exception:
                return (tpl if tpl else "", int(default_size * scale))

        self.scaled_font_title = scaled_font(FONT_TITLE, 18)
        self.scaled_font_sub = scaled_font(FONT_SUB, 12)
        self.scaled_font_ui = scaled_font(FONT_UI, 12)
        
        # Initialiser l'UI d'abord
        self.setup_ui()
        
        # Puis v√©rifier les privil√®ges
        self.root.after(100, self.check_and_request_admin)

        # Do not bind a global resize font-scaler to avoid feedback/render loops.
        # The layout uses grid weights and proportional Treeview columns.
    
    def check_admin_privileges(self):
        """V√©rifie si le script s'ex√©cute avec des privil√®ges administrateur"""
        plat = platform.system().lower()
        
        if "linux" in plat or "darwin" in plat:
            return os.geteuid() == 0
        elif "windows" in plat:
            try:
                import ctypes
                return ctypes.windll.shell32.IsUserAnAdmin()
            except:
                return False
        return False
    
    def check_and_request_admin(self):
        """Demande les privil√®ges admin si n√©cessaire"""
        if not self.is_admin and not self.admin_dialog_shown:
            self.admin_dialog_shown = True
            self.show_admin_dialog()
        elif self.is_admin:
            self.status_label.config(text="‚úÖ Privil√®ges administrateur d√©tect√©s", fg="green")
    
    def show_admin_dialog(self):
        """Affiche la bo√Æte de dialogue pour les privil√®ges admin"""
        # Cr√©er une bo√Æte de dialogue personnalis√©e avec 3 options
        dialog = tk.Toplevel(self.root)
        dialog.title("Privil√®ges Administrateur")
        dialog.transient(self.root)
        # Taille proportionnelle √† l'√©cran (one-time) pour rester responsive
        try:
            sw = int(self.root.winfo_screenwidth() or 1200)
            sh = int(self.root.winfo_screenheight() or 800)
            w = max(420, int(sw * 0.45))
            h = max(260, int(sh * 0.28))
            dialog.geometry(f"{w}x{h}")
        except Exception:
            dialog.geometry("500x300")
        # Prot√©ger grab_set: attendre que la fen√™tre soit visible puis tenter le grab
        try:
            dialog.update_idletasks()
            dialog.wait_visibility()
            dialog.grab_set()
        except Exception:
            # Si la fen√™tre n'est pas viewable (ex: environnement graphique restreint),
            # on continue sans grab pour √©viter l'exception qui stoppe l'√©v√©nement Tk
            pass
        
        # Centrer la fen√™tre and set sensible minimum size so controls remain clickable
        try:
            dialog.update_idletasks()
            sx = dialog.winfo_screenwidth()
            sy = dialog.winfo_screenheight()
            dx = int((sx - w) / 2) if 'w' in locals() else int((sx - 500) / 2)
            dy = int((sy - h) / 2) if 'h' in locals() else int((sy - 300) / 2)
            dialog.geometry(f"+{dx}+{dy}")
            dialog.minsize(int((w if 'w' in locals() else 500) * 0.6), int((h if 'h' in locals() else 300) * 0.6))
        except Exception:
            pass
        
        # Frame principal
        main_frame = ttk.Frame(dialog, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Ic√¥ne et titre
        title_label = tk.Label(
            main_frame,
            text="üîê Privil√®ges Administrateur",
            font=self.scaled_font_title,
            bg=PALETTE["bg"],
            fg=PALETTE["text"]
        )
        title_label.pack(pady=(0, 20))
        
        # Variable pour la r√©ponse
        self.admin_choice = None

        # Boutons - placer en bas et garder visible
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))

        ttk.Button(
            buttons_frame,
            text="üöÄ Relancer avec sudo",
            command=lambda: self.set_admin_choice("restart", dialog),
            style="Accent.TButton"
        ).pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(
            buttons_frame,
            text="üìù Continuer en mode limit√©",
            command=lambda: self.set_admin_choice("continue", dialog)
        ).pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(
            buttons_frame,
            text="‚ùå Quitter",
            command=lambda: self.set_admin_choice("quit", dialog)
        ).pack(side=tk.LEFT)

        # Use a scrollable read-only text area for the message so it remains usable
        try:
            msg_height = max(4, int((h if 'h' in locals() else 300) * 0.18))
        except Exception:
            msg_height = 6

        msg_box = scrolledtext.ScrolledText(
            main_frame,
            height=msg_height,
            wrap=tk.WORD,
            font=self.scaled_font_ui,
            bg=PALETTE["bg"],
            fg=PALETTE["text"],
            relief=tk.FLAT
        )
        msg_box.insert(tk.END, (
            "Pour obtenir les informations compl√®tes sur les PID et pouvoir arr√™ter les services,\n"
            "il est recommand√© d'ex√©cuter ce programme avec des privil√®ges administrateur.\n\n"
            "Que souhaitez-vous faire ?"
        ))
        msg_box.config(state=tk.DISABLED)
        msg_box.pack(fill=tk.BOTH, expand=True, pady=(0, 12))
        
        # Attendre la r√©ponse
        # Ensure the dialog receives focus and behaves modally where possible
        try:
            dialog.lift()
            dialog.focus_force()
            dialog.grab_set()
        except Exception:
            pass

        dialog.wait_window()
        
        # Traiter la r√©ponse
        if self.admin_choice == "restart":
            self.restart_as_admin()
        elif self.admin_choice == "continue":
            messagebox.showinfo(
                "Mode Limit√©",
                "Le programme continue en mode limit√©.\n\n"
                "üìù Certaines informations (PID, noms de processus) ne seront pas disponibles\n"
                "üîß Vous ne pourrez pas arr√™ter les services directement"
            )
        elif self.admin_choice == "quit":
            self.root.quit()
    
    def set_admin_choice(self, choice, dialog):
        """D√©finit le choix de l'utilisateur pour les privil√®ges admin"""
        self.admin_choice = choice
        dialog.destroy()
    
    def restart_as_admin(self):
        """Relance le programme avec des privil√®ges administrateur"""
        plat = platform.system().lower()
        script_path = os.path.abspath(__file__)
        exe = sys.executable

        try:
            # macOS / Linux flow: prefer graphical helpers, then terminal fallback, then sudo exec
            if "linux" in plat or "darwin" in plat:
                # Try macOS AppleScript first
                if "darwin" in plat:
                    try:
                        # Use osascript to run the script with administrator privileges (will show password prompt)
                        osa_cmd = f"do shell script \"{exe} '{script_path}'\" with administrator privileges"
                        subprocess.Popen(["osascript", "-e", osa_cmd])
                        self.root.quit()
                        return
                    except Exception:
                        # fallthrough to other methods
                        pass

                # Try pkexec first (preferred polkit flow). Use subprocess.run with a short timeout
                pkexec_path = shutil.which("pkexec")
                if pkexec_path:
                    try:
                        # Preserve essential environment variables so pkexec/polkit can show a GUI prompt
                        env = os.environ.copy()
                        for k in ("DISPLAY", "XAUTHORITY", "DBUS_SESSION_BUS_ADDRESS", "XDG_RUNTIME_DIR"):
                            if k in os.environ:
                                env[k] = os.environ[k]

                        # Build a shell command that preserves essential env vars and execs the python process.
                        # Use sh -c under pkexec so the environment is set in the elevated process.
                        def mk_env_assignment(k):
                            v = env.get(k)
                            return f'{k}={shlex.quote(v)}' if v is not None else None

                        parts = []
                        for k in ("PATH", "DISPLAY", "XAUTHORITY", "DBUS_SESSION_BUS_ADDRESS", "XDG_RUNTIME_DIR"):
                            a = mk_env_assignment(k)
                            if a:
                                parts.append(a)

                        # Build the exec string
                        exec_cmd = ' '.join(parts + [f'exec {shlex.quote(exe)} {shlex.quote(script_path)}'])

                        # Call pkexec to run: /bin/sh -c "<env...> exec 'python' 'script'"
                        shell_runner = ['/bin/sh', '-c', exec_cmd]
                        cmd = [pkexec_path] + shell_runner

                        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)

                        # Monitor: wait a little and if pkexec still runs, close GUI to let the auth dialog be used.
                        def monitor_and_close(p):
                            try:
                                # Give user ample time to interact with the polkit prompt
                                time.sleep(8)
                                if p.poll() is None:
                                    try:
                                        self.root.after(0, self.root.quit)
                                    except Exception:
                                        pass
                                else:
                                    try:
                                        err = p.stderr.read().decode(errors="ignore")
                                    except Exception:
                                        err = "<no stderr>"
                                    print(f"pkexec exited quickly (rc={p.returncode}): {err}")
                            except Exception as e:
                                print(f"monitor thread error: {e}")

                        threading.Thread(target=monitor_and_close, args=(proc,), daemon=True).start()
                        return
                    except Exception as e:
                        print(f"pkexec invocation error: {e}")

                # Try gksudo / kdesudo if available (older GUI sudo wrappers)
                for helper in ("gksudo", "kdesudo"):
                    helper_path = shutil.which(helper)
                    if helper_path:
                        try:
                            subprocess.Popen([helper_path, exe, script_path])
                            self.root.quit()
                            return
                        except Exception:
                            continue

                # Fallback: open a terminal emulator that runs sudo so the user sees a password prompt
                terminals = [
                    ("gnome-terminal", ["--", "bash", "-lc"]),
                    ("konsole", ["-e"]),
                    ("xfce4-terminal", ["--command"]),
                    ("mate-terminal", ["--", "bash", "-lc"]),
                    ("lxterminal", ["-e"]),
                    ("terminator", ["-x"]),
                    ("xterm", ["-e"]),
                ]

                sudo_cmd = f"sudo {exe} '{script_path}'"
                for term, extra_args in terminals:
                    if shutil.which(term):
                        try:
                            # Construct command depending on terminal
                            if term == "xterm":
                                cmd = [term] + extra_args + [f"{sudo_cmd}; echo; read -n1 -s -r -p 'Press any key to close...'"]
                            else:
                                # Use bash -lc style where supported so we can keep the terminal open briefly
                                cmd = [term] + extra_args + [f"{sudo_cmd}; echo; read -n1 -s -r -p 'Press any key to close...'"]
                            subprocess.Popen(cmd)
                            self.root.quit()
                            return
                        except Exception:
                            continue

                # Last resort: execvp with sudo (will open terminal if user launched from one)
                messagebox.showinfo(
                    "Red√©marrage",
                    "Aucun helper graphique d√©tect√©. Le programme va √™tre relanc√© avec sudo dans le m√™me environnement."
                )
                self.root.quit()
                os.execvp('sudo', ['sudo', exe, script_path])

            elif "windows" in plat:
                import ctypes
                # Use ShellExecute 'runas' to trigger UAC; pass the script path as parameter
                params = f'"{script_path}"'
                try:
                    ret = ctypes.windll.shell32.ShellExecuteW(None, "runas", exe, params, None, 1)
                    if int(ret) > 32:
                        # launched successfully; exit current GUI
                        self.root.quit()
                        return
                    else:
                        messagebox.showwarning(
                            "√âchec du red√©marrage",
                            "Impossible de relancer en tant qu'administrateur. Continuation en mode limit√©."
                        )
                except Exception as e:
                    messagebox.showerror("Erreur", f"√âchec du relancement UAC: {e}")

        except Exception as e:
            messagebox.showerror(
                "Erreur de red√©marrage",
                f"Impossible de relancer avec privil√®ges admin: {e}\n\nContinuation en mode limit√©."
            )

    def setup_ui(self):
        """Configure l'interface utilisateur"""
        # Style
        style = ttk.Style()
        # Prefer native-looking theme on macOS when available
        try:
            if platform.system().lower().startswith('darwin'):
                style.theme_use('aqua')
            else:
                style.theme_use('clam')
        except Exception:
            pass

        # Base frame and label styles
        style.configure("TFrame", background=PALETTE["bg"]) 
        style.configure("TLabel", background=PALETTE["bg"], foreground=PALETTE["text"], font=self.scaled_font_ui)

        # Buttons: macOS-like flat buttons with blue accent for primary actions
        style.configure("TButton", font=self.scaled_font_ui, padding=6, background=PALETTE["card"], borderwidth=0, focusthickness=0)
        style.configure("Accent.TButton", background=PALETTE["accent"], foreground="#ffffff", relief="flat")
        style.map("Accent.TButton",
                  background=[('active', '#0666d6'), ('disabled', '#94a3b8')],
                  foreground=[('disabled', '#d1d5db')])

        # Treeview / headings - clean, white rows with subtle separators
        style.configure("Treeview",
                        background=PALETTE["card"],
                        fieldbackground=PALETTE["card"],
                        foreground=PALETTE["text"],
                        rowheight=26,
                        font=self.scaled_font_ui)
        # Build heading font from scaled sub font (ensure bold)
        try:
            heading_family = self.scaled_font_sub[0]
            heading_size = int(self.scaled_font_sub[1]) if len(self.scaled_font_sub) > 1 else 11
        except Exception:
            heading_family = FONT_SUB[0]
            heading_size = 11
        style.configure("Treeview.Heading",
                        background=PALETTE["card"],
                        foreground=PALETTE["muted"],
                        font=(heading_family, max(10, heading_size), "bold"))

        # Progressbar
        style.configure("Colored.Horizontal.TProgressbar", troughcolor=PALETTE["card"], background=PALETTE["accent"]) 
        
        # Frame principal (card)
        main_frame = ttk.Frame(self.root, padding="14", style="TFrame")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=12, pady=12)
        # Root bg
        try:
            self.root.configure(bg=PALETTE["bg"])
        except Exception:
            pass

        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)

        # Bandeau titre
        banner = tk.Frame(main_frame, bg=PALETTE["accent"], height=64)
        banner.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 12))
        banner.grid_propagate(False)
        title_label = tk.Label(
            banner,
            text="üîç Scanner de Ports Avanc√©",
            font=self.scaled_font_title,
            bg=PALETTE["accent"],
            fg="#ffffff"
        )
        title_label.pack(side=tk.LEFT, padx=18, pady=10)
        # small subtitle on right
        subtitle = tk.Label(banner, text="Interface graphique ‚Äî gestion et diagnostics", font=self.scaled_font_sub, bg=PALETTE["accent"], fg="#e6f0ff")
        subtitle.pack(side=tk.RIGHT, padx=12)

        # Status admin
        status_fg = "#10b981" if self.is_admin else "#f59e0b"
        self.status_label = tk.Label(
            main_frame,
            text="‚ö†Ô∏è Privil√®ges administrateur non d√©tect√©s" if not self.is_admin else "‚úÖ Privil√®ges administrateur d√©tect√©s",
            fg=status_fg,
            bg=PALETTE["bg"],
            font=self.scaled_font_sub
        )
        self.status_label.grid(row=1, column=0, columnspan=3, pady=(0, 6))

        # Frame de configuration
        config_frame = ttk.LabelFrame(main_frame, text="Configuration du Scan", padding="10")
        config_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        config_frame.columnconfigure(1, weight=1)

        # Cible
        ttk.Label(config_frame, text="Cible:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.target_var = tk.StringVar(value=DEFAULT_TARGET)
        self.target_entry = ttk.Entry(config_frame, textvariable=self.target_var, width=20)
        self.target_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))

        # Ports
        ttk.Label(config_frame, text="Ports:").grid(row=0, column=2, sticky=tk.W, padx=(10, 5))
        self.ports_var = tk.StringVar(value="common")
        self.ports_combo = ttk.Combobox(
            config_frame, 
            textvariable=self.ports_var,
            values=["common", "top1000", "top5000", "all", "1-1024", "22,80,443,3306"],
            width=15
        )
        self.ports_combo.grid(row=0, column=3, sticky=tk.W)

        # Options
        options_frame = ttk.Frame(config_frame)
        options_frame.grid(row=1, column=0, columnspan=4, sticky=(tk.W, tk.E), pady=(10, 0))

        self.show_dynamic_var = tk.BooleanVar(value=False)
        self.show_dynamic_check = ttk.Checkbutton(
            options_frame,
            text="Afficher les ports dynamiques",
            variable=self.show_dynamic_var
        )
        self.show_dynamic_check.grid(row=0, column=0, sticky=tk.W)

        # Boutons
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=10)

        self.scan_button = ttk.Button(
            buttons_frame,
            text="üöÄ D√©marrer le Scan",
            command=self.start_scan,
            style="Accent.TButton"
        )
        self.scan_button.grid(row=0, column=0, padx=(0, 10))

        self.stop_button = ttk.Button(
            buttons_frame,
            text="‚èπÔ∏è Arr√™ter",
            command=self.stop_scan,
            state=tk.DISABLED,
            style="TButton"
        )
        self.stop_button.grid(row=0, column=1, padx=(0, 10))

        self.clear_button = ttk.Button(
            buttons_frame,
            text="üóëÔ∏è Effacer",
            command=self.clear_results,
            style="TButton"
        )
        self.clear_button.grid(row=0, column=2)

        self.help_button = ttk.Button(
            buttons_frame,
            text="‚ùì Aide",
            command=self.show_help_window,
            style="TButton"
        )
        self.help_button.grid(row=0, column=3, padx=(10,0))

        # R√©sultats
        results_frame = ttk.LabelFrame(main_frame, text="R√©sultats du Scan", padding="10")
        results_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S))
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(0, weight=1)

        # Treeview pour les r√©sultats
        self.tree = ttk.Treeview(
            results_frame,
            columns=("Port", "Service", "PID", "Processus", "S√©curit√©", "Actions"),
            show="headings",
            height=15
        )

        # Configuration des colonnes
        self.tree.heading("Port", text="Port")
        self.tree.heading("Service", text="Service")
        self.tree.heading("PID", text="PID")
        self.tree.heading("Processus", text="Processus")
        self.tree.heading("S√©curit√©", text="S√©curit√©")
        self.tree.heading("Actions", text="Actions")

        self.tree.column("Port", width=80, anchor=tk.CENTER)
        self.tree.column("Service", width=120)
        self.tree.column("PID", width=80, anchor=tk.CENTER)
        self.tree.column("Processus", width=200)
        self.tree.column("S√©curit√©", width=100, anchor=tk.CENTER)
        self.tree.column("Actions", width=150)

        # Scrollbars
        v_scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient=tk.HORIZONTAL, command=self.tree.xview)

        self.tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        self.tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))

        # Bind double-click pour actions
        self.tree.bind("<Double-1>", self.on_port_double_click)

        # Menu contextuel
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="üîß Arr√™ter le service", command=self.stop_service)
        self.context_menu.add_command(label="üíÄ Tuer le processus", command=self.kill_process)
        self.context_menu.add_command(label="üìã Copier les d√©tails", command=self.copy_details)
        self.tree.bind("<Button-3>", self.show_context_menu)

        # Barre de progression
        self.progress_frame = ttk.Frame(main_frame)
        self.progress_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        self.progress_frame.columnconfigure(0, weight=1)

        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            self.progress_frame,
            variable=self.progress_var,
            maximum=100,
            style="Colored.Horizontal.TProgressbar"
        )
        self.progress_bar.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))

        self.progress_label = tk.Label(
            self.progress_frame,
            text="Pr√™t pour le scan",
            bg=PALETTE["bg"],
            fg=PALETTE["muted"],
            font=self.scaled_font_sub
        )
        self.progress_label.grid(row=0, column=1)

    # Note: responsive auto-scaling of fonts was removed because it caused
    # feedback loops in some environments. The UI uses grid weights and
    # proportional column widths set at startup instead.

    def classify_port(self, port, service_name, pid_infos, banner, target_ip):
        """Classe un port et renvoie une √©tiquette lisible et un niveau de s√©v√©rit√©.

        Retour: (label_str, severity) o√π severity dans ('low','medium','high','info')
        La classification combine r√®gles heuristiques (num√©ros bien connus),
        l'information sur les processus (ex: processus root) et le contenu du banner.
        """
        # Normaliser
        service = (service_name or "").lower()
        b = (banner or "").lower()

        # Priorit√©: dynamique (plage √©ph√©m√®re)
        if 32768 <= port <= 65535:
            return ("üü¢ Dynamique", 'low')

        # Flags bas√©s sur PID (si disponible)
        runs_as_root = False
        try:
            for p in (pid_infos or []):
                if p.get('user') in ('root', '0', 'administrator'):
                    runs_as_root = True
                    break
        except Exception:
            runs_as_root = False

        # Lists of well-known ports
        remote_ports = {22, 3389, 5900, 23}
        web_ports = {80, 443, 8080, 8443}
        db_ports = {3306, 5432, 27017, 1433, 1521, 6379}
        mail_ports = {25, 587, 110, 143, 993, 995}
        fileshare_ports = {139, 445}
        insecure_plain = {21, 23, 69}

        # Detecteurs dans le banner
        is_http_banner = ('http/' in b) or ('server:' in b and 'http' in b)
        is_ssh_banner = b.startswith('ssh-') or 'openssh' in b

        # Assignation par port/service
        if port in remote_ports or 'ssh' in service or is_ssh_banner:
            label = "üî¥ Critique ‚Äî Acc√®s distant"
            return (label + (" (root)" if runs_as_root else ""), 'high')

        if port in web_ports or 'http' in service or is_http_banner:
            # Differentier HTTP vs HTTPS
            if port in (443, 8443) or 'https' in service or 'ssl' in b or 'tls' in b:
                label = "üü° Web ‚Äî HTTPS"
                severity = 'medium'
            else:
                label = "üü° Web ‚Äî HTTP"
                severity = 'medium'
            if runs_as_root:
                severity = 'high'
                label += " (process root)"
            return (label, severity)

        if port in db_ports or any(k in service for k in ('mysql', 'postgres', 'mongodb', 'redis', 'mssql', 'oracle')):
            return ("üî¥ Base de donn√©es ‚Äî Critique", 'high')

        if port in mail_ports or any(k in service for k in ('smtp', 'imap', 'pop3')):
            return ("üü† Mail ‚Äî V√©rifier authentification/relay", 'medium')

        if port in fileshare_ports or any(k in service for k in ('smb', 'cifs')):
            return ("üî¥ Partage de fichiers ‚Äî Sensible", 'high')

        if port in insecure_plain or any(k in service for k in ('telnet', 'ftp', 'tftp')):
            return ("üî¥ Non chiffr√© ‚Äî Insecure (cleartext)", 'high')

        # Privileged port check
        if port < 1024:
            if service_name and service_name.lower() not in ('unknown', 'port-dynamique'):
                return (f"üîí Privil√©gi√© ‚Äî {service_name}", 'medium')
            return ("üîí Privil√©gi√© (port <1024)", 'medium')

        # Suspicious heuristics: unknown service and not common
        common_known = remote_ports | web_ports | db_ports | mail_ports | fileshare_ports | insecure_plain
        if (service_name is None or service_name.lower() in ('unknown', '')) and port not in common_known:
            return ("üî¥ Suspicious ‚Äî Service inconnu", 'high')

        # Default
        return ("üü° Service", 'low')
    
    def start_scan(self):
        """D√©marre le scan en arri√®re-plan"""
        if self.scan_running:
            return
        
        # Validation
        target = self.target_var.get().strip()
        if not target:
            messagebox.showerror("Erreur", "Veuillez sp√©cifier une cible")
            return
        
        ports_arg = self.ports_var.get().strip()
        if not ports_arg:
            messagebox.showerror("Erreur", "Veuillez sp√©cifier des ports")
            return
        
        self.scan_running = True
        self.scan_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.clear_results()
        
        # D√©marrer le thread de scan
        self.scan_thread = threading.Thread(
            target=self.run_scan,
            args=(target, ports_arg),
            daemon=True
        )
        self.scan_thread.start()
    
    def run_scan(self, target, ports_arg):
        """Ex√©cute le scan (dans un thread s√©par√©)"""
        try:
            # R√©solution DNS
            try:
                target_ip = socket.gethostbyname(target)
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("Erreur DNS", f"Impossible de r√©soudre {target}: {e}"))
                return
            
            # Parse des ports
            try:
                ports = parse_ports(ports_arg)
            except Exception as e:
                self.root.after(0, lambda: messagebox.showerror("Erreur Ports", f"Format de ports invalide: {e}"))
                return
            
            num_ports = len(ports)
            self.root.after(0, lambda: self.progress_label.config(text=f"Scan de {num_ports} ports sur {target_ip}..."))
            
            # Configuration optimis√©e
            if num_ports > 10000:
                timeout = 0.3
                workers = min(1000, num_ports // 10)
            elif num_ports > 1000:
                timeout = 0.5
                workers = min(800, num_ports // 5)
            else:
                timeout = DEFAULT_TIMEOUT
                workers = min(DEFAULT_WORKERS, max(50, num_ports))
            
            # Scan
            scanned_count = 0
            open_ports = []
            
            with ThreadPoolExecutor(max_workers=workers) as executor:
                futures = {executor.submit(scan_port, target_ip, p, timeout): p for p in ports}
                
                for future in as_completed(futures):
                    if not self.scan_running:  # Check si arr√™t demand√©
                        break
                    
                    port, status, banner = future.result()
                    scanned_count += 1
                    
                    if status == "open":
                        open_ports.append((port, banner))
                    
                    # Mise √† jour de la progression
                    progress = (scanned_count / num_ports) * 100
                    self.root.after(0, lambda p=progress: self.progress_var.set(p))
                    
                    if scanned_count % max(1, num_ports // 20) == 0:
                        self.root.after(0, lambda c=scanned_count, t=num_ports: 
                                       self.progress_label.config(text=f"Scann√© {c}/{t} ports..."))
            
            if not self.scan_running:
                self.root.after(0, lambda: self.progress_label.config(text="Scan arr√™t√©"))
                return
            
            # Filtrage des ports dynamiques
            show_dynamic = self.show_dynamic_var.get()
            if not show_dynamic:
                display_ports = [(p, b) for (p, b) in open_ports if get_service_info(p)[0] != "Port-Dynamique"]
            else:
                display_ports = open_ports[:]
            
            # Ajout des r√©sultats √† l'interface
            self.root.after(0, lambda: self.populate_results(display_ports, target_ip))
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("Erreur de Scan", f"Erreur durant le scan: {e}"))
        finally:
            self.root.after(0, self.scan_finished)
    
    def populate_results(self, open_ports, target_ip):
        """Remplit le tableau avec les r√©sultats"""
        self.scan_results = []
        
        for port, banner in sorted(open_ports):
            service_name, service_cmd, _ = get_service_info(port)
            
            # R√©cup√©ration des PID
            pid_infos = get_pids_for_port(port)
            if pid_infos:
                pid_display = ", ".join(f"{x['pid']}" for x in pid_infos)
                process_display = ", ".join(f"{x['name']}" for x in pid_infos)
            else:
                pid_display = "Inconnu"
                process_display = "Inconnu" if not self.is_admin else "Aucun"
            
            # Analyse de s√©curit√© (heuristiques am√©lior√©es)
            security, _ = self.classify_port(port, service_name, pid_infos, banner, target_ip)
            
            # Ajout √† l'arbre
            item_id = self.tree.insert("", tk.END, values=(
                port,
                service_name,
                pid_display,
                process_display[:30] + "..." if len(process_display) > 30 else process_display,
                security,
                "Double-clic"
            ))
            
            # Stockage des donn√©es compl√®tes
            self.scan_results.append({
                "item_id": item_id,
                "port": port,
                "service_name": service_name,
                "service_cmd": service_cmd,
                "banner": banner,
                "pid_infos": pid_infos,
                "target_ip": target_ip
            })
        
        # Mise √† jour du statut
        num_results = len(open_ports)
        if num_results == 0:
            status_text = "Aucun port ouvert d√©tect√©"
            if not self.show_dynamic_var.get():
                status_text += " (ports dynamiques masqu√©s)"
        else:
            status_text = f"Scan termin√© - {num_results} port(s) ouvert(s) trouv√©(s)"
        
        self.progress_label.config(text=status_text)
        self.progress_var.set(100)
    
    def scan_finished(self):
        """Nettoie apr√®s la fin du scan"""
        self.scan_running = False
        self.scan_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
    
    def stop_scan(self):
        """Arr√™te le scan en cours"""
        self.scan_running = False
        self.progress_label.config(text="Arr√™t du scan...")
    
    def clear_results(self):
        """Efface les r√©sultats"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        self.scan_results = []
        self.progress_var.set(0)
        self.progress_label.config(text="Pr√™t pour le scan")
    
    def get_selected_result(self):
        """R√©cup√®re l'√©l√©ment s√©lectionn√©"""
        selection = self.tree.selection()
        if not selection:
            return None
        
        item_id = selection[0]
        for result in self.scan_results:
            if result["item_id"] == item_id:
                return result
        return None
    
    def on_port_double_click(self, event):
        """G√®re le double-clic sur un port"""
        # Obtenir l'√©l√©ment cliqu√© directement depuis l'√©v√©nement
        item = self.tree.identify('item', event.x, event.y)
        if not item:
            return
        
        # S√©lectionner l'√©l√©ment
        self.tree.selection_set(item)
        
        # Trouver le r√©sultat correspondant
        result = None
        for res in self.scan_results:
            if res["item_id"] == item:
                result = res
                break
        
        if result:
            self.show_port_details(result)
        else:
            messagebox.showwarning("Erreur", "Impossible de trouver les d√©tails de ce port")
    
    def show_context_menu(self, event):
        """Affiche le menu contextuel"""
        item = self.tree.identify('item', event.x, event.y)
        if item:
            self.tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
    
    def show_port_details(self, result):
        """Affiche les d√©tails d'un port dans une fen√™tre popup"""
        details_window = tk.Toplevel(self.root)
        details_window.title(f"D√©tails du Port {result['port']}")
        details_window.transient(self.root)
        # Taille proportionnelle √† l'√©cran
        try:
            sw = int(self.root.winfo_screenwidth() or 1200)
            sh = int(self.root.winfo_screenheight() or 800)
            w = max(600, int(sw * 0.6))
            h = max(400, int(sh * 0.6))
            details_window.geometry(f"{w}x{h}")
        except Exception:
            details_window.geometry("800x600")
        details_window.resizable(True, True)
        details_window.configure(bg='white')
        # Center and set minimum size so buttons remain visible
        try:
            details_window.update_idletasks()
            sx = details_window.winfo_screenwidth()
            sy = details_window.winfo_screenheight()
            dx = int((sx - w) / 2) if 'w' in locals() else int((sx - 800) / 2)
            dy = int((sy - h) / 2) if 'h' in locals() else int((sy - 600) / 2)
            details_window.geometry(f"+{dx}+{dy}")
            details_window.minsize(int((w if 'w' in locals() else 800) * 0.6), int((h if 'h' in locals() else 600) * 0.5))
        except Exception:
            pass
        
        # Frame principal
        frame = tk.Frame(details_window, padx=10, pady=10)
        frame.pack(fill=tk.BOTH, expand=True)
        
        # R√©sum√©
        summary_label = tk.Label(
            frame,
            text=f"Port {result['port']} - {result['service_name']} sur {result['target_ip']}",
            font=self.scaled_font_sub,
            bg='white',
            fg=PALETTE['text']
        )
        summary_label.pack(pady=(0, 10))
        
        # Informations
        # Use a readable monospace/code font for details when possible
        try:
            code_font = ("Courier", max(10, int(self.scaled_font_ui[1]) if len(self.scaled_font_ui) > 1 else 10))
        except Exception:
            code_font = ("Courier", 10)

        info_text = scrolledtext.ScrolledText(frame, height=20, wrap=tk.WORD, font=code_font)
        info_text.pack(fill=tk.BOTH, expand=True, pady=(0, 10))

        # Construire un affichage clair et robuste des d√©tails
        details_lines = []
        details_lines.append(f"Service d√©tect√© : {result.get('service_name')}")
        details_lines.append(f"Service (cmd): {result.get('service_cmd') or 'Inconnu'}")
        details_lines.append(f"Cible: {result.get('target_ip')}")
        details_lines.append("")

        # Banner : afficher en repr si non-printable ou trop long
        banner = result.get('banner') or ''
        if banner:
            safe_banner = banner if all(32 <= ord(c) <= 126 for c in banner) else repr(banner)
            if len(safe_banner) > 100:
                safe_banner = safe_banner[:100] + "..."
            details_lines.append("Banner:")
            details_lines.append(safe_banner)
            details_lines.append("")

        # Si la cible n'est pas locale, indiquer que l'on ne peut pas r√©cup√©rer les PID locaux
        local = is_local_target_strict(result.get('target_ip'))
        details_lines.append(f"Cible locale: {'Oui' if local else 'Non'}")
        details_lines.append("")

        # R√©cup√©rer et afficher les PIDs (rafra√Æchir au moment de l'ouverture)
        pid_infos = []
        if local:
            try:
                pid_infos = get_pids_for_port(result['port'])
            except Exception:
                pid_infos = result.get('pid_infos', []) or []
        else:
            pid_infos = []

        if pid_infos:
            details_lines.append("Processus trouv√©s :")
            for pid_info in pid_infos:
                cmdline = pid_info.get('cmd') or ''
                # Si cmdline est trop long, afficher complet sur une ligne s√©par√©e
                details_lines.append(f"  PID: {pid_info.get('pid')} | Nom: {pid_info.get('name')} | Utilisateur: {pid_info.get('user')}")
                details_lines.append(f"    CMD: {cmdline}")
                details_lines.append("")
        else:
            details_lines.append("Aucun PID trouv√© localement pour ce port.")
            if not local:
                details_lines.append("(Cible distante ‚Äî impossible de r√©cup√©rer les PID locaux)")
            else:
                details_lines.append("(Ex√©cutez l'application en mode administrateur/sudo pour obtenir plus d'informations sur les processus)")
            details_lines.append("")

        # Instructions utiles
        details_lines.append("Actions recommand√©es :")
        if result.get('service_cmd'):
            details_lines.append(f"  - Arr√™ter proprement le service: sudo systemctl stop {result.get('service_cmd')}")
        details_lines.append(f"  - V√©rifier les PIDs via: sudo lsof -i :{result.get('port')} || sudo ss -ltnp | grep :{result.get('port')}")

        details = "\n".join(details_lines)
        info_text.insert(tk.END, details)
        # Mettre √† jour l'affichage
        details_window.update()
        
        # Boutons d'action (utiliser polices mises √† l'√©chelle)
        buttons_frame = tk.Frame(frame)
        buttons_frame.pack(fill=tk.X, pady=(10, 0))

        btn_font = self.scaled_font_ui

        # Bouton arr√™ter service
        stop_state = tk.NORMAL if self.is_admin and result['service_cmd'] else tk.DISABLED
        tk.Button(
            buttons_frame,
            text=f"üîß Arr√™ter {result['service_cmd'] or 'service'}",
            command=lambda: self.stop_service_action(result, details_window),
            state=stop_state,
            font=btn_font
        ).pack(side=tk.LEFT, padx=(0, 5))

        # Bouton tuer processus
        kill_state = tk.NORMAL if self.is_admin and result['pid_infos'] else tk.DISABLED
        tk.Button(
            buttons_frame,
            text="üíÄ Tuer les processus",
            command=lambda: self.kill_process_action(result, details_window),
            state=kill_state,
            font=btn_font
        ).pack(side=tk.LEFT, padx=(0, 5))

        tk.Button(
            buttons_frame,
            text="üìã Copier",
            command=lambda: self.copy_to_clipboard(details),
            font=btn_font
        ).pack(side=tk.LEFT, padx=(0, 5))

        tk.Button(
            buttons_frame,
            text="Fermer",
            command=details_window.destroy,
            font=btn_font
        ).pack(side=tk.RIGHT)
        
        # Mettre √† jour l'affichage and ensure focus so buttons are clickable
        try:
            details_window.update_idletasks()
            details_window.wait_visibility()
            details_window.lift()
            details_window.focus_force()
            details_window.grab_set()
        except Exception:
            # If grab_set fails (non-graphical X session), continue without modal grab
            pass
    
    def stop_service_action(self, result, parent_window):
        """Arr√™te un service"""
        if not self.is_admin:
            messagebox.showerror("Erreur", "Privil√®ges administrateur requis")
            return
        
        service_cmd = result['service_cmd']
        if not service_cmd:
            messagebox.showerror("Erreur", "Nom du service inconnu")
            return
        
        response = messagebox.askyesno(
            "Confirmation",
            f"√ätes-vous s√ªr de vouloir arr√™ter le service '{service_cmd}' ?"
        )
        
        if not response:
            return
        
        try:
            subprocess.check_output(["systemctl", "stop", service_cmd], stderr=subprocess.STDOUT)
            messagebox.showinfo("Succ√®s", f"Service '{service_cmd}' arr√™t√© avec succ√®s")
            parent_window.destroy()
            # Rafra√Æchir la vue
            self.refresh_results()
        except subprocess.CalledProcessError as e:
            error = e.output.decode(errors="ignore") if hasattr(e, "output") else str(e)
            messagebox.showerror("Erreur", f"Impossible d'arr√™ter le service:\n{error}")
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur: {e}")
    
    def kill_process_action(self, result, parent_window):
        """Tue les processus d'un port"""
        if not self.is_admin:
            messagebox.showerror("Erreur", "Privil√®ges administrateur requis")
            return
        
        if not result['pid_infos']:
            messagebox.showerror("Erreur", "Aucun PID trouv√©")
            return
        
        pids = [info['pid'] for info in result['pid_infos']]
        response = messagebox.askyesno(
            "Confirmation",
            f"√ätes-vous s√ªr de vouloir tuer les processus {pids} ?\n"
            "‚ö†Ô∏è Attention: Cela peut causer une corruption de donn√©es!"
        )
        
        if not response:
            return
        
        try:
            results = kill_pids(pids, result['port'])
            success_count = sum(1 for ok, _ in results.values() if ok)
            total = len(results)
            
            if success_count == total:
                messagebox.showinfo("Succ√®s", f"Tous les processus ({success_count}) ont √©t√© tu√©s")
            else:
                messagebox.showwarning("Partiel", f"{success_count}/{total} processus tu√©s avec succ√®s")
            
            parent_window.destroy()
            self.refresh_results()
            
        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors de l'arr√™t des processus: {e}")
    
    def refresh_results(self):
        """Rafra√Æchit les r√©sultats apr√®s une action"""
        # Re-v√©rifie les PIDs et le statut des ports d√©j√† affich√©s.
        # Pour chaque port affich√© :
        # - si des PIDs existent, met √† jour la colonne PID/Processus
        # - si aucun PID et le port est ferm√©, supprime la ligne
        # - si aucun PID mais le port reste ouvert, affiche "Inconnu" pour PID
        try:
            # Faire une copie car on peut modifier self.scan_results pendant l'it√©ration
            for res in list(self.scan_results):
                port = res.get('port')
                target_ip = res.get('target_ip')

                # R√©cup√©rer les PIDs actuels (best-effort)
                try:
                    pids = get_pids_for_port(port)
                except Exception:
                    pids = []

                if pids:
                    pid_display = ", ".join(str(x['pid']) for x in pids)
                    process_display = ", ".join(x['name'] for x in pids)
                    # Recalculer l'√©tiquette de s√©curit√© via la fonction centralis√©e
                    security, _ = self.classify_port(
                        port,
                        (res.get('service_name') or get_service_info(port)[0]),
                        pids,
                        res.get('banner'),
                        res.get('target_ip')
                    )

                    # Mettre √† jour l'item tree
                    try:
                        self.tree.item(res['item_id'], values=(
                            port,
                            res.get('service_name') or get_service_info(port)[0],
                            pid_display,
                            (process_display[:30] + '...') if len(process_display) > 30 else process_display,
                            security,
                            'Double-clic'
                        ))
                    except Exception:
                        # si l'item n'existe plus, ignorer
                        pass
                    # Mettre √† jour la structure m√©moire
                    res['pid_infos'] = pids
                else:
                    # Aucun PID trouv√© : v√©rifier si le port est toujours ouvert
                    try:
                        _, status, _ = scan_port(target_ip, port, DEFAULT_TIMEOUT)
                    except Exception:
                        status = 'filtered'

                    if status == 'open':
                        # Port ouvert mais PID inconnu
                        try:
                            self.tree.item(res['item_id'], values=(
                                port,
                                res.get('service_name') or get_service_info(port)[0],
                                'Inconnu',
                                'Inconnu',
                                'üü° Service',
                                'Double-clic'
                            ))
                        except Exception:
                            pass
                        res['pid_infos'] = []
                    else:
                        # Port ferm√© -> supprimer la ligne
                        try:
                            self.tree.delete(res['item_id'])
                        except Exception:
                            pass
                        try:
                            self.scan_results.remove(res)
                        except ValueError:
                            pass

            # Mettre √† jour le texte de statut
            remaining = len(self.scan_results)
            if remaining == 0:
                self.progress_label.config(text="Aucun port ouvert d√©tect√©")
                self.progress_var.set(0)
            else:
                self.progress_label.config(text=f"{remaining} port(s) restant(s)")
        except Exception as e:
            # Ne pas faire planter l'UI ; log pour debug
            print(f"Erreur lors du rafra√Æchissement des r√©sultats: {e}")
    
    def stop_service(self):
        """Action menu contextuel - arr√™ter service"""
        result = self.get_selected_result()
        if result:
            self.show_port_details(result)
    
    def kill_process(self):
        """Action menu contextuel - tuer processus"""
        result = self.get_selected_result()
        if result:
            self.show_port_details(result)
    
    def copy_details(self):
        """Copie les d√©tails dans le presse-papier"""
        result = self.get_selected_result()
        if result:
            details = f"Port {result['port']} ({result['service_name']})"
            self.copy_to_clipboard(details)
    
    def copy_to_clipboard(self, text):
        """Copie du texte dans le presse-papier"""
        self.root.clipboard_clear()
        self.root.clipboard_append(text)
        messagebox.showinfo("Copi√©", "Informations copi√©es dans le presse-papier")

    def show_help_window(self):
        """Affiche la fen√™tre d'aide (contenu embarqu√© depuis examples.sh)."""
        help_win = tk.Toplevel(self.root)
        help_win.title("Aide - Exemples et utilisation")
        help_win.transient(self.root)
        # Taille proportionnelle √† l'√©cran
        try:
            sw = int(self.root.winfo_screenwidth() or 1200)
            sh = int(self.root.winfo_screenheight() or 800)
            w = max(700, int(sw * 0.6))
            h = max(480, int(sh * 0.6))
            help_win.geometry(f"{w}x{h}")
        except Exception:
            help_win.geometry("800x600")

        txt = scrolledtext.ScrolledText(help_win, wrap=tk.WORD, font=("Courier", max(10, int(self.scaled_font_ui[1]) if len(self.scaled_font_ui) > 1 else 10)))
        txt.pack(fill=tk.BOTH, expand=True, padx=6, pady=6)

        # Tags et styles pour le texte color√©
        heading_font = tkfont.Font(txt, txt.cget("font"))
        try:
            heading_font.configure(weight="bold", size=max(10, int(self.scaled_font_sub[1]) if len(self.scaled_font_sub) > 1 else 11))
        except Exception:
            heading_font.configure(weight="bold", size=11)
        try:
            code_font = tkfont.Font(family="Courier", size=max(10, int(self.scaled_font_ui[1]) if len(self.scaled_font_ui) > 1 else 10))
        except Exception:
            code_font = tkfont.Font(family="Courier", size=10)

        txt.tag_configure("heading", foreground="#1f4e79", font=heading_font)
        txt.tag_configure("code", background="#f5f5f5", font=code_font, foreground="#222222")
        txt.tag_configure("important", foreground="#b22222", font=heading_font)
        txt.tag_configure("bullet", foreground="#333333")

        # Ins√©rer le HELP_TEXT ligne par ligne et appliquer des tags simples
        try:
            txt.config(state=tk.NORMAL)
            for line in HELP_TEXT.splitlines():
                stripped = line.strip()
                start_index = txt.index(tk.INSERT)
                txt.insert(tk.END, line + "\n")

                # Heuristiques simples pour le style
                if not stripped:
                    continue
                if stripped.startswith(("Guide", "1)", "2)", "3)", "4)", "5)", "6)", "7)", "8)", "Questions")) or stripped.isupper():
                    txt.tag_add("heading", start_index, f"{start_index} lineend")
                elif stripped.startswith("sudo") or "python3" in stripped or line.startswith("    "):
                    txt.tag_add("code", start_index, f"{start_index} lineend")
                elif "Attention" in stripped or "Attention :" in stripped:
                    txt.tag_add("important", start_index, f"{start_index} lineend")
                elif stripped.startswith(('-', '*')):
                    txt.tag_add("bullet", start_index, f"{start_index} lineend")

            txt.config(state=tk.DISABLED)
        except Exception:
            txt.config(state=tk.NORMAL)
            txt.insert(tk.END, "Aide non disponible.")
            txt.config(state=tk.DISABLED)

        # Place the close button in a small bottom frame so it's always visible
        btn_frame = ttk.Frame(help_win)
        btn_frame.pack(fill=tk.X)
        ttk.Button(btn_frame, text="Fermer", command=help_win.destroy).pack(side=tk.RIGHT, padx=6, pady=6)

        # Ensure the help window is visible and raised (avoid grab_set which can be blocked)
        try:
            help_win.deiconify()
            help_win.lift()
            # Temporarily set topmost to ensure window manager raises it
            try:
                help_win.attributes("-topmost", True)
                help_win.update()
                help_win.attributes("-topmost", False)
            except Exception:
                # attributes may not be supported on some WMs
                pass
            help_win.focus_force()
        except Exception:
            pass

def main():
    """Point d'entr√©e principal"""
    try:
        root = tk.Tk()
        app = PortScannerGUI(root)
        root.mainloop()
    except KeyboardInterrupt:
        print("\nArr√™t du programme")
    except Exception as e:
        import traceback
        print(f"Erreur: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()